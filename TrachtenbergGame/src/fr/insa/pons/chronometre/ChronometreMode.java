/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.insa.pons.chronometre;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author hugop
 */
public class ChronometreMode extends javax.swing.JFrame {

    private int Nombre1;
    private int Nombre2;
    private int CompteurEssais;
    private jPanelResults Resultats ;
    private final Timer timer1 ;
    /**
     * Creates new form ChronometreMode
     */
    public ChronometreMode() {
        ActionListener tache_timer;
        initComponents();
        Resultats = new jPanelResults();
        CompteurEssais = 1;
        jLabelEssais.setText(Integer.toString(CompteurEssais));
        Nombre1 = ChoixNombre(CompteurEssais);
        Nombre2 = ChoixNombre(CompteurEssais);
        jTextAreaCalculs.setText(Nombre1 + " * " + Nombre2);
        chrono chronometre = new chrono();
        tache_timer = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                chrono.setDixieme(chrono.getDixieme() + 1);
                if (chrono.getDixieme() == 10) {
                    chrono.setDixieme(0);
                    chrono.setSeconde(chrono.getSeconde() + 1);
                } else if (chrono.getSeconde() == 60) {
                    chrono.setSeconde(0);
                    chrono.setMinute(chrono.getMinute() + 1);
                }
                jLabel1.setText(chrono.getMinute() + " : " + chrono.getSeconde() + " : " + chrono.getDixieme());
            }
        };
        timer1 = new Timer(chrono.getPeriod(), tache_timer);
        timer1.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCalculs = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jPanelChrono = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelEssais = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jTextAreaCalculs.setEditable(false);
        jTextAreaCalculs.setColumns(20);
        jTextAreaCalculs.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jTextAreaCalculs.setRows(5);
        jScrollPane1.setViewportView(jTextAreaCalculs);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanelChronoLayout = new javax.swing.GroupLayout(jPanelChrono);
        jPanelChrono.setLayout(jPanelChronoLayout);
        jPanelChronoLayout.setHorizontalGroup(
            jPanelChronoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChronoLayout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
        jPanelChronoLayout.setVerticalGroup(
            jPanelChronoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jPanelChrono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jLabelEssais, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChrono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEssais, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        if (CompteurEssais == 10) {
            timer1.stop();
            Resultats.getjLabelTimer().setText(chrono.getMinute() + " : " + chrono.getSeconde() + " : " + chrono.getDixieme()) ;
            JOptionPane.showMessageDialog(null,Resultats,"RESULTATS",JOptionPane.OK_OPTION);
            CompteurEssais = 0 ;
            
            this.dispose();
        } else {
//            if (Integer.parseInt(jTextField1.getText().trim()) == (Nombre1 * Nombre2)) {

                jTextField1.setText(null);
                CompteurEssais = CompteurEssais + 1;
                Nombre1 = ChoixNombre(CompteurEssais);
                Nombre2 = ChoixNombre(CompteurEssais);
                jTextAreaCalculs.setText(Nombre1 + " * " + Nombre2);
                jLabelEssais.setText(Integer.toString(CompteurEssais));
//            } else {
//               Nombre1 = ChoixNombre(CompteurEssais); 
//               Nombre2 = ChoixNombre(CompteurEssais);
//               jTextField1.setText(null);
//               jTextAreaCalculs.setText(Nombre1 + " * " + Nombre2);
//            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChronometreMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChronometreMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChronometreMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChronometreMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChronometreMode().setVisible(true);
            }
        });
    }

    public static int ChoixNombre(int Compteur) {
        int Nombre = 0;
        switch (Compteur) {
            case 1: {
                while (Nombre < 10) {
                    Nombre = (int) (Math.random() * 100);
                }
            }
            break;
            case 2: {
                while (Nombre < 10) {
                    Nombre = (int) (Math.random() * 100);
                }
            }
            break;
            case 3: {
                while (Nombre < 10) {
                    Nombre = (int) (Math.random() * 100);
                }
            }
            break;
            case 4: {
                while (Nombre < 100) {
                    Nombre = (int) (Math.random() * 1000);
                }
            }
            break;
            case 5: {
                while (Nombre < 100) {
                    Nombre = (int) (Math.random() * 1000);
                }
            }
            break;
            case 6: {
                while (Nombre < 100) {
                    Nombre = (int) (Math.random() * 1000);
                }
            }
            break;
            case 7: {
                while (Nombre < 1000) {
                    Nombre = (int) (Math.random() * 10000);
                }
            }
            break;
            case 8: {
                while (Nombre < 1000) {
                    Nombre = (int) (Math.random() * 10000);
                }
            }
            break;
            case 9: {
                while (Nombre < 1000) {
                    Nombre = (int) (Math.random() * 10000);
                }
            }
            break;
            case 10: {
                while (Nombre < 10000) {
                    Nombre = (int) (Math.random() * 100000);
                }
            }
            break;
        }
        return (Nombre);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEssais;
    private javax.swing.JPanel jPanelChrono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaCalculs;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
